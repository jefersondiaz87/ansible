# -----------------------------------------------------------
# Construir el nombre del Edge Gateway igual que en vRO
# -----------------------------------------------------------
- name: Construir nombre del Edge Gateway
  set_fact:
    locationPrefix: "{{ vcd.orgVdcName.split('-')[0] }}"
    edgeGatewayName: "{{ locationPrefix }}-{{ vcd.orgFullName }}-{{ vcd.networkType }}"
    externalNetworkName: "{{ locationPrefix }}-{{ vcd.networkType }}-01"

- name: Mostrar nombre calculado del Edge Gateway
  ansible.builtin.debug:
    msg:
      - "üìç locationPrefix: {{ locationPrefix }}"
      - "üì° Edge Gateway generado: {{ edgeGatewayName }}"
      - "üåê External Network esperada: {{ externalNetworkName }}"

# ===========================================================
# VALIDAR SI EL EDGE GATEWAY YA EXISTE (USANDO CLOUDAPI)
# ===========================================================
- name: Validar si el Edge Gateway ya existe (CloudAPI)
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/edgeGateways?filter=name=={{ edgeGatewayName }}"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    validate_certs: "{{ vcd.verify_ssl }}"
    return_content: yes
  register: edge_check
  delegate_to: localhost
  failed_when: edge_check.status not in [200, 201]

- name: Determinar si el Edge Gateway ya existe
  ansible.builtin.set_fact:
    edge_exists: "{{ (edge_check.json.values is defined) and (edge_check.json.values | length > 0) }}"

- name: Mostrar estado del Edge Gateway
  ansible.builtin.debug:
    msg:
      - "üí° Edge Gateway buscado: {{ edgeGatewayName }}"
      - "üìã Resultado CloudAPI: {{ edge_check.json.values | length }} encontrados"
      - "üîç Estado: {{ 'YA EXISTE ‚úÖ' if edge_exists else 'NO EXISTE üöÄ Se proceder√° a crear' }}"

# ===========================================================
# OBTENER ID DE LA RED EXTERNA SEG√öN locationPrefix Y networkType
# ===========================================================

- name: Buscar red externa por nombre
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/externalNetworks?filter=name=={{ externalNetworkName }}"
    method: GET
    headers:
      Authorization: "Bearer {{ vcd.access_token }}"
      Accept: "application/json;version={{ vcd.api_version }}"
    validate_certs: "{{ vcd.verify_ssl }}"
  register: ext_net_lookup

- name: Validar que exista red externa
  ansible.builtin.fail:
    msg: "‚ùå No se encontr√≥ red externa con nombre '{{ externalNetworkName }}'"
  when: ext_net_lookup.json.values | length == 0

- name: Guardar ID de la red externa
  ansible.builtin.set_fact:
    extNetId: "{{ ext_net_lookup.json.values[0].id }}"

- name: Mostrar red externa seleccionada
  ansible.builtin.debug:
    msg: "üåê Red externa seleccionada: {{ externalNetworkName }} (ID: {{ extNetId }})"

# ===========================================================
# CREAR EDGE GATEWAY SI NO EXISTE
# ===========================================================
- name: Crear Edge Gateway en VMware Cloud Director v√≠a CloudAPI
  when: not edge_exists
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/edgeGateways"
    method: POST
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ edgeGatewayName }}"
      description: "Edge Gateway creado autom√°ticamente por Ansible REST"
      orgVdc:
        id: "{{ vcd.orgVdcName}}"
      externalNetwork:
        id: "{{ extNetId }}"
      edgeGatewayType: "{{ vcd.networkType }}"
      haEnabled: false
      distributedRoutingEnabled: false
      advancedNetworkingEnabled: true
  register: edge_create
  delegate_to: localhost
  failed_when: edge_create.status not in [200, 201, 202]

- name: Confirmar creaci√≥n del Edge Gateway
  when: not edge_exists
  ansible.builtin.debug:
    msg: "‚úÖ Edge Gateway '{{ edgeGatewayName }}' creado correctamente."

- name: Obtener URN del Edge Gateway
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/edgeGateways?filter=name=={{ edgeGatewayName }}"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
  register: edge_query

- name: Guardar URN del Edge Gateway
  ansible.builtin.set_fact:
    edge_urn: "{{ edge_query.json.values[0].id }}"

# ===========================================================
# AGREGAR METADATA TRIALMODE (OPCIONAL)
# ===========================================================
# Asignar metadata TrialMode usando la API correcta
- name: Asignar metadata TrialMode al Edge Gateway
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/entities/{{ edge_urn }}/metadata"
    method: POST
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      key: "TrialMode"
      value: "{{ trial | string | lower }}"
      type: "STRING"
  register: metadata_update
  delegate_to: localhost
  failed_when: metadata_update.status not in [200, 201, 202]

- name: Confirmar metadata aplicada
  ansible.builtin.debug:
    msg: "üü¢ Metadata 'TrialMode={{ 'true' if trial else 'false' }}' aplicada correctamente al Edge Gateway '{{ edgeGatewayName }}'."
