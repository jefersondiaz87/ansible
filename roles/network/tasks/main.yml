# -----------------------------------------------------------
# Construir el nombre del Edge Gateway igual que en vRO
# -----------------------------------------------------------
- name: Construir nombre del Edge Gateway
  ansible.builtin.set_fact:
    locationPrefix: "{{ vcd.orgVdcName.split('-')[0] }}"
    edgeGatewayName: "{{ vcd.orgVdcName.split('-')[0] }}-{{ vcd.orgFullName }}-{{ vcd.networkType }}"
    externalNetworkName: "{{ vcd.orgVdcName.split('-')[0] }}-{{ vcd.networkType }}-01"
  delegate_to: localhost

- name: Mostrar nombre calculado del Edge Gateway
  ansible.builtin.debug:
    msg:
      - "üìç locationPrefix: {{ locationPrefix }}"
      - "üì° Edge Gateway generado: {{ edgeGatewayName }}"
      - "üåê External Network esperada: {{ externalNetworkName }}"

# ===========================================================
# VALIDAR SI EL EDGE GATEWAY YA EXISTE (USANDO CLOUDAPI)
# ===========================================================
- name: Validar si el Edge Gateway ya existe (CloudAPI)
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/edgeGateways?filter=name=={{ edgeGatewayName }}"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    validate_certs: "{{ vcd.verify_ssl }}"
    return_content: yes
  register: edge_check
  delegate_to: localhost
  failed_when: edge_check.status not in [200, 201]

- name: Determinar si el Edge Gateway ya existe
  ansible.builtin.set_fact:
    edge_exists: "{{ ('values' in edge_check.json) and (edge_check.json['values'] | length > 0) }}"

- name: Mostrar estado del Edge Gateway
  ansible.builtin.debug:
    msg:
      - "üí° Edge Gateway buscado: {{ edgeGatewayName }}"
      - "üìã Resultado CloudAPI: {{ (edge_check.json['values'] | length) if ('values' in edge_check.json) else 0 }} encontrados"
      - "üîç Estado: {{ 'YA EXISTE ‚úÖ' if edge_exists else 'NO EXISTE üöÄ Se proceder√° a crear' }}"

# ===========================================================
# OBTENER ID DE LA RED EXTERNA SEG√öN locationPrefix Y networkType
# ===========================================================
- name: Buscar red externa por nombre
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/externalNetworks?filter=name=={{ externalNetworkName }}"
    method: GET
    headers:
      Authorization: "Bearer {{ vcd.access_token }}"
      Accept: "application/json;version={{ vcd.api_version }}"
    validate_certs: "{{ vcd.verify_ssl }}"
  register: ext_net_lookup

- name: Validar que exista red externa
  ansible.builtin.fail:
    msg: "‚ùå No se encontr√≥ red externa con nombre '{{ externalNetworkName }}'"
  when: ('values' not in ext_net_lookup.json) or (ext_net_lookup.json['values'] | length == 0)

- name: Guardar ID de la red externa
  ansible.builtin.set_fact:
    extNetId: "{{ ext_net_lookup.json['values'][0].id }}"

- name: Mostrar red externa seleccionada
  ansible.builtin.debug:
    msg: "üåê Red externa seleccionada: {{ externalNetworkName }} (ID: {{ extNetId }})"

# ===========================================================
# OBTENER DATOS DE LA RED EXTERNA PARA EDGE GATEWAY
# ===========================================================
- name: Guardar datos de red externa para Edge Gateway
  ansible.builtin.set_fact:
    gateway_ip: "{{ ext_net_lookup.json['values'][0]['subnets'][0]['gateway'] }}"
    prefix_length: "{{ ext_net_lookup.json['values'][0]['subnets'][0]['prefixLength'] }}"
    start_ip: "{{ ext_net_lookup.json['values'][0]['subnets'][0]['ipRanges']['values'][0]['startAddress'] }}"
    end_ip: "{{ ext_net_lookup.json['values'][0]['subnets'][0]['ipRanges']['values'][0]['endAddress'] }}"
  delegate_to: localhost

- name: Mostrar informaci√≥n de red calculada
  ansible.builtin.debug:
    msg:
      - "üåê Gateway IP: {{ gateway_ip }}"
      - "üî¢ Prefix Length: {{ prefix_length }}"
      - "üìç Rango IP: {{ start_ip }} - {{ end_ip }}"

# ===========================================================
# CREAR EDGE GATEWAY SI NO EXISTE
# ===========================================================
- name: Crear Edge Gateway en VMware Cloud Director v√≠a CloudAPI
  when: not edge_exists
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/edgeGateways"
    method: POST
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ edgeGatewayName }}"
      description: "Edge Gateway creado autom√°ticamente por Ansible REST"
      orgVdc:
        id: "{{ vcd.orgVdcName }}"
      edgeGatewayType: "{{ vcd.networkType }}"
      haEnabled: false
      distributedRoutingEnabled: false
      advancedNetworkingEnabled: true
    validate_certs: false
  register: edge_create
  delegate_to: localhost
  failed_when: edge_create.status not in [200, 201, 202]

- name: Confirmar creaci√≥n del Edge Gateway
  when: not edge_exists
  ansible.builtin.debug:
    msg: "‚úÖ Edge Gateway '{{ edgeGatewayName }}' creado correctamente."

# ===========================================================
# OBTENER URN DEL EDGE GATEWAY
# ===========================================================
- name: Obtener URN del Edge Gateway
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/edgeGateways?filter=name=={{ edgeGatewayName }}"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    validate_certs: false
    return_content: yes
  register: edge_query

- name: Guardar URN del Edge Gateway
  ansible.builtin.set_fact:
    edge_urn: "{{ edge_query.json['values'][0].id if ('values' in edge_query.json and edge_query.json['values'] | length > 0) else '' }}"

# ===========================================================
# ASOCIAR RED EXTERNA AL EDGE GATEWAY
# ===========================================================
- name: Asociar red externa al Edge Gateway
  when: edge_urn != ''
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/edgeGateways/{{ edge_urn }}/uplinks"
    method: POST
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ externalNetworkName }}"
      network:
        id: "{{ extNetId }}"
      type: "uplink"
    validate_certs: false
  register: uplink_create
  delegate_to: localhost
  failed_when: uplink_create.status not in [200, 201, 202]

- name: Confirmar asociaci√≥n de red externa
  when: edge_urn != ''
  ansible.builtin.debug:
    msg: "üåê Red externa '{{ externalNetworkName }}' asociada correctamente al Edge Gateway '{{ edgeGatewayName }}'."

# ===========================================================
# AGREGAR METADATA TRIALMODE (OPCIONAL)
# ===========================================================
- name: Asignar metadata TrialMode al Edge Gateway
  when: edge_urn != ''
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/entities/{{ edge_urn }}/metadata"
    method: POST
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      key: "TrialMode"
      value: "{{ trial | string | lower }}"
      type: "STRING"
    validate_certs: false
  register: metadata_update
  delegate_to: localhost
  failed_when: metadata_update.status not in [200, 201, 202]

- name: Confirmar metadata aplicada
  when: edge_urn != ''
  ansible.builtin.debug:
    msg: "üü¢ Metadata 'TrialMode={{ 'true' if trial else 'false' }}' aplicada correctamente al Edge Gateway '{{ edgeGatewayName }}'."
