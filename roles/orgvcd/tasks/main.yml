# ===========================================================
# VALIDAR ORGANIZACIÓN EXISTENTE
# ===========================================================
- name: Obtener ID de la organización
  uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/orgs?filter=name=={{ vcd.orgFullName }}"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: org_check

- name: Extraer ID de la organización
  set_fact:
    org_id: "{{ org_check.json['values'][0].id if (org_check.json['values'] | length > 0) else '' }}"

- name: Validar existencia de la organización
  fail:
    msg: "❌ La organización '{{ vcd.orgFullName }}' no existe. Debe ser creada previamente."
  when: org_id == ''

# ===========================================================
# RESOLVER COMPONENTES NECESARIOS
# ===========================================================
- name: Obtener Provider VDC
  uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/providerVdcs?filter=name=={{ providerVdc }}"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: provider_check

- name: Obtener Network Pool
  uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/networkPools?filter=name=={{ networkPool }}"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: network_check

- name: Obtener Storage Profile
  uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/storageProfiles?filter=name=={{ storageProfile }}"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: storage_check

- name: Definir IDs de componentes
  set_fact:
    provider_id: "{{ provider_check.json['values'][0].id }}"
    network_id: "{{ network_check.json['values'][0].id }}"
    storage_id: "{{ storage_check.json['values'][0].id }}"

# ===========================================================
# VALIDAR EXISTENCIA DEL ORG VDC
# ===========================================================
- name: Verificar si el Org VDC ya existe
  uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/orgVdcs?filter=name=={{ vcd.orgVdcName }}"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: vdc_check

- name: Determinar si el Org VDC ya existe
  set_fact:
    vdc_exists: "{{ (vdc_check.json['values'] | length > 0) }}"

# ===========================================================
# CREAR ORG VDC
# ===========================================================
- name: Crear Org VDC vía CloudAPI
  when: not vdc_exists
  uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/orgVdcs"
    method: POST
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ vcd.orgVdcName }}"
      description: "Automatically created organization vdc {{ vcd.orgVdcName }}"
      isEnabled: true
      allocationModel: "{{ allocationModel }}"
      computeCapacity:
        cpu:
          units: "MHz"
          allocated: "{{ (vcd.cpuQuota | float * 1000) | int }}"
          limit: "{{ (vcd.cpuQuota | float * 1000) | int }}"
        memory:
          units: "MB"
          allocated: "{{ (vcd.memoryQuota | float * 1024) | int }}"
          limit: "{{ (vcd.memoryQuota | float * 1024) | int }}"
      providerVdc:
        id: "{{ provider_id }}"
      networkPool:
        id: "{{ network_id }}"
      storageProfiles:
        - id: "{{ storage_id }}"
          limit: "{{ (vcd.storageQuota | float * 1024) | int }}"
      isThinProvision: "{{ isThinProvision }}"
      usesFastProvisioning: "{{ usesFastProvisioning }}"
      networkQuota: "{{ vcd.networkQuota }}"
      vCpuInMhz: "{{ vCpuInMhz }}"
    validate_certs: false
  register: vdc_create

- name: Confirmar creación del Org VDC
  when: not vdc_exists
  debug:
    msg: "✅ Org VDC '{{ vcd.orgVdcName }}' creado exitosamente con ID '{{ vdc_create.json.id }}'."
