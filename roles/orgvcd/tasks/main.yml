# ===========================================================
# EXTRAER PREFIJO DEL ORG VDC
# ===========================================================
- name: Extraer prefijo del Org VDC
  set_fact:
    locationPrefix: "{{ vcd.orgVdcName.split('-')[0] }}"

# ===========================================================
# VALIDAR ORGANIZACIÓN EXISTENTE
# ===========================================================
- name: Obtener ID de la organización
  uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/orgs?filter=name=={{ vcd.orgFullName }}"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: org_check

- name: Extraer ID de la organización
  set_fact:
    org_id: "{{ org_check.json.values[0].id if (org_check.json.values | length > 0) else '' }}"

- name: Validar existencia de la organización
  fail:
    msg: "❌ La organización '{{ vcd.orgFullName }}' no existe. Debe ser creada previamente."
  when: org_id == ''

# ===========================================================
# RESOLVER COMPONENTES NECESARIOS
# ===========================================================

- name: Obtener todos los Provider VDCs
  uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/providerVdcs"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: provider_check

- name: Buscar Provider VDC por prefijo regional
  set_fact:
    provider_match: >-
      {{
        provider_check.json.values
        | selectattr('name', 'search', '^' ~ locationPrefix)
        | list
        | first
      }}
  when: provider_check.json.values | length > 0

- name: Validar Provider VDC encontrado
  fail:
    msg: "❌ No se encontró ningún Provider VDC que comience con '{{ locationPrefix }}'."
  when: provider_match is not defined

# ===========================================================
# NETWORK POOL asociado al NSX Manager del Provider
# ===========================================================
- name: Obtener todos los Network Pools
  uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/networkPools/networkPoolSummaries"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: network_check

- name: Buscar Network Pool por NSX Manager del Provider
  set_fact:
    network_match: >-
      {{
        network_check.json.values
        | selectattr('managingOwnerRef.name', 'equalto', provider_match.nsxTManager.name)
        | selectattr('name', 'search', locationPrefix)
        | list
        | first
      }}
  when: network_check.json.values | length > 0

- name: Validar Network Pool encontrado
  fail:
    msg: "❌ No se encontró ningún Network Pool asociado al NSX Manager '{{ provider_match.nsxTManager.name }}'."
  when: network_match is not defined

# ===========================================================
# STORAGE PROFILE asociado al Provider VDC
# ===========================================================
- name: Obtener todos los Storage Profiles (Policies)
  uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/pvdcStoragePolicies"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: storage_check

- name: Buscar Storage Policy por Provider VDC
  set_fact:
    storage_match: >-
      {{
        storage_check.json.values
        | selectattr('providerVdcRef.name', 'equalto', provider_match.name)
        | list
        | first
      }}
  when: storage_check.json.values | length > 0

- name: Validar Storage Profile encontrado
  fail:
    msg: "❌ No se encontró Storage Policy asociada al Provider '{{ provider_match.name }}'."
  when: storage_match is not defined

# ===========================================================
# MOSTRAR RESULTADOS
# ===========================================================
- name: Mostrar nombres de componentes detectados
  debug:
    msg:
      - "✅ Provider VDC: {{ provider_match.name }}"
      - "✅ Network Pool: {{ network_match.name }}"
      - "✅ Storage Profile: {{ storage_match.name }}"

# ===========================================================
# VALIDAR EXISTENCIA DEL ORG VDC
# ===========================================================
- name: Verificar si el Org VDC ya existe por nombre
  uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/vdcs?filter=name=={{ vcd.orgVdcName }}"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: vdc_check

- name: Determinar si el Org VDC ya existe
  set_fact:
    vdc_exists: "{{ vdc_check.json.values | length > 0 }}"

# ===========================================================
# CALCULAR MODELO DE ASIGNACIÓN SEGÚN "TRIAL"
# ===========================================================
- name: Determinar modelo de asignación
  set_fact:
    allocation_model: >-
      {% if vcd.trial | bool %}
      PayAsYouGo
      {% else %}
      AllocationPool
      {% endif %}

- name: Mostrar modelo de asignación seleccionado
  debug:
    msg: "⚙️ Modo de asignación seleccionado: {{ allocation_model }}"

# ===========================================================
# 4️⃣ Ejecutar script PowerShell remoto
# ===========================================================
- name: Ejecutar script PowerCLI remoto con variables dinámicas
  win_shell: |
    $params = @{
      Server = "{{vcd.host}}"
      Username = "{{vcd.user}}"
      Password = "{{vcd.password}}"
      OrgName = "{{ vcd.orgFullName }}"
      VdcName = "{{ vcd.orgVdcName }}"
      ProvName = "{{ provider_match.name }}"
      SpName = "{{ storage_match.name }}"
      NpName = "{{ network_match.name }}"
      CpuAllocation = {{ vcd.cpuQuota }}
      MemoryAllocation = {{ vcd.memoryQuota }}
      StorageAllocation = {{ vcd.storageQuota }}
      Description = "Organización {{ orgFullName }} - creado por AWX"
      AllocationModel = "{{ allocation_model }}"
    }

    # Pasar al script PowerShell principal
    powershell.exe -ExecutionPolicy Bypass -File "C:\Users\jeferson.diaz\Documents\WindowsPowerShell\Scripts\orgvcd.ps1" @params
