---
- name: Probar conexión a VCD y acceso a la API REST
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    # Se obtienen de las variables extra o de AWX
    vcd_host: "{{ vcenter_hostname }}"
    vcd_user: "{{ vcenter_username }}"
    vcd_password: "{{ vcenter_password }}"
    vcd_org: "{{ vcenter_org }}"
    api_version: "36.0" # Ajusta según tu versión de VCD

  tasks:
    - name: 1. Autenticarse en VCD para obtener el token de sesión
      ansible.builtin.uri:
        url: "{{ vcd_host }}/api/sessions"
        method: POST
        user: "{{ vcd_user }}"
        password: "{{ vcd_password }}"
        headers:
          Accept: "application/*+json;version={{ api_version }}"
        validate_certs: false
        status_code: 200
      register: auth_result
      ignore_errors: true

    - name: Manejar error de autenticación
      ansible.builtin.fail:
        msg: "Error de autenticación: {{ auth_result.msg | default('Desconocido') }}"
      when: auth_result is failed

    - name: 2. Capturar el token de autorización
      ansible.builtin.set_fact:
        vcd_token: "{{ auth_result.x_vcloud_authorization }}"

    - name: 3. Probar consumo REST con el token obtenido
      ansible.builtin.uri:
        url: "{{ vcd_host }}/api/admin/orgs"
        method: GET
        headers:
          Accept: "application/*+json;version={{ api_version }}"
          x-vcloud-authorization: "{{ vcd_token }}"
        validate_certs: false
        status_code: 200
      register: orgs_response

    - name: 4. Imprimir la lista de organizaciones
      ansible.builtin.debug:
        msg: "Conexión a VCD exitosa. Organizaciones: {{ orgs_response.json.org | map(attribute='name') | list }}"
